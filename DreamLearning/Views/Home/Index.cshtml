@using DreamLearning.Models
@using DreamLearning.Dto
@model TransData
@{
    ViewBag.Title = "Home Page";

    string key = System.Web.Configuration.WebConfigurationManager.AppSettings["googleMaps"];

}
<div class="container-fluid h-100" style="position:relative; top: 50px; ">
    <div class="row mh-100">
        <div class="col-4 border-right p-2">
            <div class="row">
                <div class="col-12">
                    <form class="form-inline">
                        <div class="form-group w-75 pr-1">

                            <input type="search"
                                   class="form-control w-100"
                                   id="inputSearch"
                                   placeholder="Search">
                        </div>
                        <span id="btn-search" href="#" class="btn btn-info" style="font-size: 12px;">
                            <i class="fas fa-search-location">Busca</i>
                        </span>
                    </form>
                </div>
                <div class="col-12 h-100">
                    <ul id="addressList" class="list-group" style="max-height: 85vh; overflow: auto;"></ul>
                </div>
            </div>
        </div>
        <div class="col-8 w-50 p-0 m-0">
            <div id="map" style="height: 500px; width:882px; background-color:rebeccapurple; color:azure; font-family:Verdana; font-size:30px" class="jumbotron-fluid w-100">Carregando ...</div>
        </div>
    </div>

    <script src="https://maps.googleapis.com/maps/api/js?key=@key&libraries=places"></script>

    <script src="~/Scripts/jquery-3.3.1.js"></script>

    <div class="gcse-searchresults-only"></div>
    <script>

       
            var adrdresses = [], points = [], schools = [], subArrayAddresses = [], subArrayPoints = [], subArraySchools = [], pointMarkers = [], markers = [], places = [];
            var newPoint = {};
            var center = { lat: -30.030194684981844, lng: -51.22252230705834 };

            var map;

                function initialize() {
                  var mapProp = {
                    center: { lat: -30.030194684981844, lng: -51.22252230705834 },
                    zoom: 16,
                    mapTypeId: google.maps.MapTypeId.ROADMAP
                  };
                  map = new google.maps.Map(document.getElementById('map'), mapProp);
                };


            var input = document.getElementById("inputSearch");

            var defaultBounds = new google.maps.LatLngBounds(new google.maps.LatLng(-30.030194684981844, -51.22252230705834))
            var searchBox = new google.maps.places.SearchBox(input, { bounds: defaultBounds });

            var placesService = new google.maps.places.PlacesService(map);

            places.forEach(function (place) {
                if (!place.geometry) {
                    console.log("Returned place contains no geometry");
                    return;
                }
                var icon = {
                    url: place.icon,
                    size: new google.maps.Size(71, 71),
                    origin: new google.maps.Point(0, 0),
                    anchor: new google.maps.Point(17, 34),
                    scaledSize: new google.maps.Size(25, 25)
                };


                var buttonSend = function () {
                    document.getElementById('btn-search').onclick = function () {
                        var input = document.getElementById('inputSearch');
                        input.focus();
                        google.maps.event.trigger(input, 'keydown', { keyCode: 13 });
                    };
                }
            });

            searchBox.addListener('places_changed', function () {
                var places = searchBox.getPlaces();

                if (places.length == 0) {
                    return;
                }

                markers.forEach(function (marker) {
                    marker.setMap(null);
                });

                newPoint = { lat: places[0].geometry.location.lat(), lng: places[0].geometry.location.lng() }

                console.log(newPoint)
                map.setCenter({ lat: places[0].geometry.location.lat(), lng: places[0].geometry.location.lng() }, 13)

                getData({ lat: places[0].geometry.location.lat(), lng: places[0].geometry.location.lng() });
            });

        var makeMarkers = function (subArrayPoints) {
            debugger; 
                subArrayPoints.forEach(element => {
                    var marker = new google.maps.Marker({
                        position: new google.maps.LatLng(parseFloat(element.Latitude), parseFloat(element.Longitude)),
                        map: map,
                        title: "Um teste"
                    });
                    markers.push(marker);
                });
                markers.forEach(function (marker) {
                    marker.setMap(marker);
                });
            };

        var getData = function (place) {
            var coordinate = place; 
                    $.ajax({
                        url : "@Url.Action("GetAllData","Home" )",
                        type : "POST",
                        dataType: "html",
                        data: { coordinate }
                    }).done(function (resp) {
                        let response = JSON.parse(resp);
                        points = response.Points
                        addresses = response.Addresses;
                        schools = response.Schools
                        
                        var aux = points.slice(0, 5)
                        console.log(aux);
                        aux.map((point) => {
                            schools.map((school) => {
                                if (school.Inep === point.Inep) {
                                    subArraySchools.push(school);
                                }
                            });
                        });
                        makeMarkers(aux);
                    }).catch(error => {
                        console.log(error)
                        alert("Não foi possível encontrar as informações requisitadas. ");
                        return;
                    });
            }

        initialize()
    </script>

</div>
